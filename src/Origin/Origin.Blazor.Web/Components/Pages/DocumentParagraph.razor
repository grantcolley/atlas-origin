@page "/DocumentParagraph"
@page "/DocumentParagraph/{Id:int?}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inherits ModelContainerBase<Origin.Core.Models.DocumentParagraph>

@{
    // Display the markup for the underlying base
    // ModelContainerBase<T> we are inheriting.
    base.BuildRenderTree(__builder);
}

@code {
    [Inject]
    internal IOriginOptionsRequests? OriginOptionsRequests { get; set; }

    public override string? Title { get; set; } = "Document Paragraph";
    public override string? APIGetEndpoint { get; set; } = OriginAPIEndpoints.GET_DOCUMENT_PARAGRAPH;
    public override string? APICreateEndpoint { get; set; } = OriginAPIEndpoints.CREATE_DOCUMENT_PARAGRAPH;
    public override string? APIUpdateEndpoint { get; set; } = OriginAPIEndpoints.UPDATE_DOCUMENT_PARAGRAPH;
    public override string? APIDeleteEndpoint { get; set; } = OriginAPIEndpoints.DELETE_DOCUMENT_PARAGRAPH;
    public override string? ModelNameField { get; set; } = "Name";
    public override string? IdentityFieldName { get; set; } = "DocumentParagraphId";

    private IEnumerable<Origin.Core.Models.DocumentFont>? _fontsSource = [];
    private IEnumerable<Origin.Core.Models.DocumentColour>? _coloursSource = [];
    private List<string> _tabs = new List<string>() { "Paragraph", "Table" , "Content" };
    private string? _selectedTab;

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(OriginOptionsRequests);

        await base.OnInitializedAsync();

        try
        {
            _selectedTab = _tabs[0];

            _isProcessing = true;

            IResponse<IEnumerable<Origin.Core.Models.DocumentFont>?> fontsResponse = await OriginOptionsRequests.GetGenericOptionsAsync<Origin.Core.Models.DocumentFont>(OriginOptions.FONT_OPTIONS).ConfigureAwait(false);

            _fontsSource = GetResponse<IEnumerable<Origin.Core.Models.DocumentFont>?>(fontsResponse);

            IResponse<IEnumerable<Origin.Core.Models.DocumentColour>?> coloursResponse = await OriginOptionsRequests.GetGenericOptionsAsync<Origin.Core.Models.DocumentColour>(OriginOptions.COLOUR_OPTIONS).ConfigureAwait(false);

            _coloursSource = GetResponse<IEnumerable<Origin.Core.Models.DocumentColour>?>(coloursResponse);

            _isProcessing = false;
        }
        catch (Exception ex)
        {
            RouteAlert(Alerts.ERROR, $"{Title} Error", ex.Message, new AtlasException(ex.Message, ex));
        }
    }

    public override RenderFragment RenderModelContent() => __builder =>
    {
        if (Model == null) throw new NullReferenceException(nameof(Model));

        <FluentGrid Spacing="3" Justify="JustifyContent.FlexStart">        
            <FluentGridItem xs="12" md="12" lg="3">
                <FluentTabs @bind-ActiveTabId="@_selectedTab">
                    <FluentTab Id="@_tabs[0]" Label="@_tabs[0]">
                        <Paragraph DocumentParagraph="@Model" FontSource="@_fontsSource" ColourSource="@_coloursSource" />
                    </FluentTab>

                    @if (Model.DocumentParagraphType == DocumentParagraphType.Table)
                    {
                        <FluentTab Id="@_tabs[1]" Label="@_tabs[1]">
                            <Table DocumentParagraph="@Model" FontSource="@_fontsSource" ColourSource="@_coloursSource" />
                        </FluentTab>
                    }

                    <FluentTab Id="@_tabs[2]" Label="@_tabs[2]">
                        Contents here...
                    </FluentTab>
                </FluentTabs>
            </FluentGridItem>
            <FluentGridItem xs="12" md="12" lg="9">
            </FluentGridItem>
        </FluentGrid>
    };
}