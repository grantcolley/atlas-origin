@page "/DocumentConfig"
@page "/DocumentConfig/{Id:int?}"
@page "/DocumentConfig/{Id:int?}/Clone/{Clone:bool?}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inherits ModelContainerBase<Origin.Core.Models.DocumentConfig>

@{
    // Display the markup for the underlying base
    // ModelContainerBase<T> we are inheriting.
    base.BuildRenderTree(__builder);
}

@code {
    [Inject]
    internal IOriginOptionsRequests? OriginOptionsRequests { get; set; }

    [Inject]
    public IDialogService? DialogService { get; set; }

    [Inject]
    public IOriginDocumentRequests? OriginDocumentRequests { get; set; }

    [Parameter]
    public bool Clone { get; set; }

    public override string? Title { get; set; } = "Document Configuration";
    public override string? APIGetEndpoint { get; set; } = OriginAPIEndpoints.GET_DOCUMENT_CONFIG;
    public override string? APICreateEndpoint { get; set; } = OriginAPIEndpoints.CREATE_DOCUMENT_CONFIG;
    public override string? APIUpdateEndpoint { get; set; } = OriginAPIEndpoints.UPDATE_DOCUMENT_CONFIG;
    public override string? APIDeleteEndpoint { get; set; } = OriginAPIEndpoints.DELETE_DOCUMENT_CONFIG;
    public override string? ModelNameField { get; set; } = "Name";
    public override string? IdentityFieldName { get; set; } = "DocumentConfigId";

    private IEnumerable<Origin.Core.Models.DocumentFont>? _fontsSource = [];
    private IEnumerable<Origin.Core.Models.DocumentColour>? _coloursSource = [];
    private List<string> _tabs = new List<string>() { "Document", "Paragraphs", "Substitutes", "Json" };
    private string? _activeTab;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(GenericRequests);
            ArgumentNullException.ThrowIfNull(OriginOptionsRequests);

            await base.OnInitializedAsync().ConfigureAwait(false);

            if (Clone)
            {
                Model = Model?.Clone();
            }

            _activeTab = _tabs[0];

            _isProcessing = true;

            IResponse<IEnumerable<Origin.Core.Models.DocumentFont>?> fontsResponse = await OriginOptionsRequests.GetGenericOptionsAsync<Origin.Core.Models.DocumentFont>(OriginOptions.FONT_OPTIONS).ConfigureAwait(false);

            _fontsSource = GetResponse<IEnumerable<Origin.Core.Models.DocumentFont>?>(fontsResponse);

            IResponse<IEnumerable<Origin.Core.Models.DocumentColour>?> coloursResponse = await OriginOptionsRequests.GetGenericOptionsAsync<Origin.Core.Models.DocumentColour>(OriginOptions.COLOUR_OPTIONS).ConfigureAwait(false);

            _coloursSource = GetResponse<IEnumerable<Origin.Core.Models.DocumentColour>?>(coloursResponse);

            _isProcessing = false;
        }
        catch(Exception ex)
        {
            RouteAlert(Alerts.ERROR, $"{Title} Error", ex.Message, new AtlasException(ex.Message, ex));
        }
    }

    protected override async Task OnSubmitAsync()
    {
        await base.OnSubmitAsync();

        if(Clone)
        {
            NavigationManager?.NavigateTo($"DocumentConfig/{Model?.DocumentConfigId}");
        }
    }

    public void OnClone()
    {
        NavigationManager?.NavigateTo($"DocumentConfig/{Model?.DocumentConfigId}/Clone/true");
    }

    public async Task OnView()
    {
        try
        {
            if (DialogService == null) throw new NullReferenceException(nameof(DialogService));
            if (OriginDocumentRequests == null) throw new NullReferenceException(nameof(OriginDocumentRequests));
            if (Model == null) throw new NullReferenceException(nameof(Model));

            byte[] bytes = await OriginDocumentRequests.GeneratePdfAsync(Model).ConfigureAwait(false);

            DocumentViewerContent? documentViewerContent = new() { Document = bytes };

            DialogParameters parameters = new()
                {
                    Title = $"{Model.DocumentConfigId} {Model.Name}",
                    Width = "1000px",
                    Height = "700px",
                    Modal = true,
                    PreventScroll = false
                };

            IDialogReference dialog = await DialogService.ShowDialogAsync<DocumentViewerDialog>(documentViewerContent, parameters);

            DialogResult? result = await dialog.Result;
        }
        catch (Exception ex)
        {
            RouteAlert(Alerts.ERROR, $"{Title} Error", ex.Message, new AtlasException(ex.Message, ex));
        }
    }

    public override RenderFragment RenderAdditionalToolbarButtons() => __builder =>
    {
        @if (_id > 0)
        {
            <FluentButton Id="view-document" aria-label="view-document" Type="ButtonType.Button" OnClick="OnView" Disabled="@_isProcessing">
                <FluentIcon Value="@(new Icons.Regular.Size20.DocumentSync())" Title="View" />
            </FluentButton>
            <FluentTooltip Anchor="view-document" Position=TooltipPosition.Right>View document</FluentTooltip>

            <FluentButton Id="clone-document" aria-label="clone-document" Type="ButtonType.Button" OnClick="OnClone" Disabled="@_isProcessing">
                <FluentIcon Value="@(new Icons.Regular.Size20.DocumentCopy())" Title="Clone" />
            </FluentButton>
            <FluentTooltip Anchor="clone-document" Position=TooltipPosition.Right>Clone document</FluentTooltip>
        }
    };

    public override RenderFragment RenderModelContent() => __builder =>
    {
        if (Model == null) throw new NullReferenceException(nameof(Model));

        <FluentGrid Spacing="3" Justify="JustifyContent.FlexStart">        
            <FluentGridItem xs="12" md="12" lg="12">
                <FluentTabs @bind-ActiveTabId="@_activeTab">
                    <FluentTab Id="@_tabs[0]">
                        <Header>
                            <FluentLabel Typo="Typography.Subject">@_tabs[0]</FluentLabel>
                        </Header>
                        <Content>
                            <Document DocumentConfig="@Model" FontSource="@_fontsSource" ColourSource="@_coloursSource"/>
                        </Content>
                    </FluentTab>
                    <FluentTab Id="@_tabs[1]">
                        <Header>
                            <FluentLabel Typo="Typography.Subject">@_tabs[1]</FluentLabel>
                        </Header>
                        <Content>
                            <DocumentConfigParagraphs DocumentConfig="@Model" />
                        </Content>
                    </FluentTab>
                    <FluentTab Id="@_tabs[2]">
                        <Header>
                            <FluentLabel Typo="Typography.Subject">@_tabs[2]</FluentLabel>
                        </Header>
                        <Content>
                            <Substitutes DocumentConfig="@Model" />
                        </Content>
                    </FluentTab>
                    <FluentTab Id="@_tabs[3]">
                        <Header>
                            <FluentLabel Typo="Typography.Subject">@_tabs[3]</FluentLabel>
                        </Header>
                        <Content>
                            <JsonView T="Origin.Core.Models.DocumentConfig" Value="@Model" />
                        </Content>
                    </FluentTab>
                </FluentTabs>
            </FluentGridItem>
            <FluentGridItem xs="12" md="12" lg="9">
            </FluentGridItem>
        </FluentGrid>
    };
}