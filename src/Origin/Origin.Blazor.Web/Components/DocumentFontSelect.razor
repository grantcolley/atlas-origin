@inherits AtlasComponentBase

@if (ReadOnly)
{
    <FluentTextField Value="@(_selectedDocumentFont?.Font)" Label="@Label" ReadOnly="true" />
}
else
{
    <FluentSelect TOption="DocumentFont"
                  @onchange="OnChange"
                  Disabled="@ReadOnly"
                  Items="@_source"
                  Label="@Label"
                  OptionValue="@(f => f.Font)"
                  SelectedOption="@_selectedDocumentFont"
                  Height="300px">
        <OptionTemplate>
            @context.Font
        </OptionTemplate>
    </FluentSelect>
}

@code {

    [CascadingParameter]
    private EditContext? CascadedEditContext { get; set; }

    [Inject]
    internal IOriginOptionsRequests? OriginOptionsRequests { get; set; }

    [Parameter]
    public string? OptionsCode { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? FieldName { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    private DocumentFont? _selectedDocumentFont;
    private IEnumerable<DocumentFont>? _source = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(OriginOptionsRequests);
            ArgumentNullException.ThrowIfNullOrWhiteSpace(OptionsCode);

            await base.OnInitializedAsync();

            // https://www.fluentui-blazor.net/DesignTokens
            // https://www.fluentui-blazor.net/Select
            // https://www.fluentui-blazor.net/Label

            IResponse<IEnumerable<DocumentFont>?> response = await OriginOptionsRequests.GetGenericOptionsAsync<DocumentFont>(OptionsCode).ConfigureAwait(false);

            _source = GetResponse(response);

            _selectedDocumentFont = _source?.FirstOrDefault(f => f.Font == Value);
        }
        catch (Exception ex)
        {
            RouteAlert(ex.Message, new AtlasException(ex.Message, ex));
        }
    }

    private async Task OnChange(ChangeEventArgs args)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(FieldName);

        string? value = args?.Value?.ToString();
        await ValueChanged.InvokeAsync(value);
        CascadedEditContext?.NotifyFieldChanged(CascadedEditContext.Field(FieldName));
    }
}