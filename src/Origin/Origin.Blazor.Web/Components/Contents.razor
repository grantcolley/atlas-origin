<br />
<FluentAccordion>
    <FluentAccordionItem Expanded=true>
        <HeadingTemplate>
            Contents
        </HeadingTemplate>
        <ChildContent>

            @if (!DocumentParagraph.IsReadOnly)
            {
                <FluentButton IconStart="@(new Icons.Regular.Size16.SlideTextEdit())" OnClick="@AddContent" Style="margin: 10px">
                    Add Content
                </FluentButton>
            }

            @foreach (DocumentContent content in DocumentParagraph.Contents.OrderBy(c => c.Order))
            {
                <FluentStack Orientation="Orientation.Horizontal" Style="margin: 10px">
                    <FluentNumberField @bind-Value="content.Order" Label="Order" ReadOnly="@(DocumentParagraph.IsReadOnly)" Min="0" Style="width: 100px" />
                    <FluentTextField Id="@($"{content.Order}-contentName")" Name="Name" @bind-Value="content.Name" Label="Name" ReadOnly="true" Tooltip />
                    <FluentTooltip Anchor="@($"{content.Order}-contentName")" Position=TooltipPosition.Right>@content.Content</FluentTooltip>

                    <FluentButton Id="@($"{content.Order}-contentButton")" aria-label="Edit" IconEnd="@(new Icons.Regular.Size16.MoreHorizontal())" OnClick="@(() => EditContent(content))" />
                    <FluentTooltip Anchor="@($"{content.Order}-contentButton")">View content details</FluentTooltip>

                    @if (!DocumentParagraph.IsReadOnly)
                    {
                        <FluentButton aria-label="Delete" Type="ButtonType.Button" OnClick="@(() => RemoveContent(content))">
                            <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                        </FluentButton>
                    }

                </FluentStack>
            }

            @if (_activeContent != null)
            {
                <p />

                <FluentDivider Style="margin: 5px; width: 100%;" Orientation=Orientation.Horizontal Role="DividerRole.Separator"></FluentDivider>

                <Content DocumentParagraph="@DocumentParagraph" DocumentContent="@_activeContent" FontSource="@FontSource" ColourSource="@ColourSource" CloseActiveContent="@CloseActiveContent" />

                <p />
            }

        </ChildContent>
    </FluentAccordionItem>
</FluentAccordion>

@code {
    [Parameter, EditorRequired]
    public DocumentParagraph DocumentParagraph { get; set; } = new();

    [Parameter]
    public IEnumerable<DocumentFont>? FontSource { get; set; }

    [Parameter]
    public IEnumerable<DocumentColour>? ColourSource { get; set; }

    private DocumentContent? _activeContent = null;

    protected void AddContent()
    {
        DocumentContent content = new();

        if (DocumentParagraph.Contents.Count == 0)
        {
            content.Order = 1;
        }
        else
        {
            content.Order = DocumentParagraph.Contents.Max(c => c.Order + 1);
        }

        DocumentParagraph.Contents.Add(content);

        _activeContent = content;
    }

    protected void RemoveContent(DocumentContent content)
    {
        DocumentParagraph.Contents.Remove(content);
        if (_activeContent == content)
        {
            _activeContent = null;
        }
    }

    protected void EditContent(DocumentContent content)
    {
        _activeContent = content;
    }

    private void CloseActiveContent()
    {
        _activeContent = null;
    }
}