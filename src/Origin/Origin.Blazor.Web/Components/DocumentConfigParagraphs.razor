<br />
<FluentGrid Spacing="3">
    <FluentGridItem xs="12" sm="6">
        
        @if (!DocumentConfig.IsReadOnly)
        {
            <FluentButton IconStart="@(new Icons.Regular.Size16.LineHorizontal4Search())" OnClick="@SearchParagraph" Style="margin: 10px">
                Paragraph Search
            </FluentButton>
        }

        @foreach (DocumentConfigParagraph configParagraph in DocumentConfig.ConfigParagraphs.OrderBy(c => c.Order))
        {
            <FluentStack Orientation="Orientation.Horizontal" Style="margin: 10px">
                <FluentNumberField @bind-Value="configParagraph.Order" Label="Order" ReadOnly="@(configParagraph.IsReadOnly)" Min="0" Style="width: 70px" />
                <FluentTextField ReadOnly="true" Value="@configParagraph.DocumentParagraph?.Name"/>
                <FluentTextField Id="@($"paragraph-content-{configParagraph.Order}")" ReadOnly="true" Value="@configParagraph.DocumentParagraph?.DisplayContent()" style="width: 300px"/>
                <FluentTooltip Anchor="@($"paragraph-content-{configParagraph.Order}")" Position=TooltipPosition.Right>@configParagraph.DocumentParagraph?.DisplayContent()</FluentTooltip>

                <FluentButton Id="@($"{configParagraph.Order}-viewButton")" aria-label="viewButton" IconEnd="@(new Icons.Regular.Size16.DocumentSync())" OnClick="@(() => View(configParagraph))" />
                <FluentTooltip Anchor="@($"{configParagraph.Order}-viewButton")">View the document</FluentTooltip>

                @if (!DocumentConfig.IsReadOnly)
                {
                    <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Remove(configParagraph))" />
                }

            </FluentStack>
        }
    </FluentGridItem>
</FluentGrid>

@code {
    [Inject]
    public IDialogService? DialogService { get; set; }

    [Inject]
    public IOriginDocumentRequests? OriginDocumentRequests { get; set; }

    [Parameter, EditorRequired]
    public DocumentConfig DocumentConfig { get; set; } = new();

    private void Remove(DocumentConfigParagraph configParagraph)
    {
        DocumentConfig.ConfigParagraphs.Remove(configParagraph);
    }

    private async Task View(DocumentConfigParagraph configParagraph)
    {
        if (configParagraph == null) throw new NullReferenceException(nameof(configParagraph));
        if (configParagraph.DocumentParagraph == null) throw new NullReferenceException(nameof(configParagraph.DocumentParagraph));
        if (DialogService == null) throw new NullReferenceException(nameof(DialogService));
        if (OriginDocumentRequests == null) throw new NullReferenceException(nameof(OriginDocumentRequests));

        DialogParameters parameters = new()
            {
                Title = $"{configParagraph.DocumentParagraph.DocumentParagraphId} {configParagraph.DocumentParagraph.Name}",
                Width = "1000px",
                Height = "700px",
                Modal = true,
                PreventScroll = false
            };

        DocumentConfig documentConfig = new() { Name = configParagraph.DocumentParagraph.Name };
        documentConfig.ConfigParagraphs.Add(configParagraph);

        byte[] bytes = await OriginDocumentRequests.GeneratePdfAsync(documentConfig).ConfigureAwait(false);

        DocumentViewerContent? documentViewerContent = new() { Document = bytes };

        IDialogReference dialog = await DialogService.ShowDialogAsync<DocumentViewerDialog>(documentViewerContent, parameters);

        DialogResult? result = await dialog.Result;
    }

    private async Task SearchParagraph(MouseEventArgs args)
    {
        ArgumentNullException.ThrowIfNull(DialogService);

        DialogParameters parameters = new()
            {
                Title = "Select Paragraphs",
                Width = "1500px",
                Height = "800px",
                Modal = true,
                PreventScroll = false
            };

        ParagraphsDialogContent? paragraphsDialogContent= new();

        IDialogReference dialog = await DialogService.ShowDialogAsync<ParagraphsDialog>(paragraphsDialogContent, parameters);

        DialogResult? result = await dialog.Result;

        if (result.Data is not null)
        {
            paragraphsDialogContent = result.Data as ParagraphsDialogContent;

            if(paragraphsDialogContent?.Paragraphs.Count > 0)
            {
                foreach (DocumentParagraph newParagraph in paragraphsDialogContent.Paragraphs)
                {
                    DocumentConfigParagraph? exists = DocumentConfig.ConfigParagraphs.FirstOrDefault(p => p.DocumentParagraph.DocumentParagraphId == newParagraph.DocumentParagraphId);

                    if (exists != null)
                    {
                        continue;
                    }

                    DocumentConfigParagraph configParagraph = new() { DocumentParagraph = newParagraph };

                    if (DocumentConfig.ConfigParagraphs.Count == 0)
                    {
                        configParagraph.Order = 1;
                    }
                    else
                    {
                        configParagraph.Order = DocumentConfig.ConfigParagraphs.Max(c => c.Order) + 1;
                    }

                    DocumentConfig.ConfigParagraphs.Add(configParagraph);
                }
            }
        }
    }
}
