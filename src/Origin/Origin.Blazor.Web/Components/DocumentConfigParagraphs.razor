<br />
<FluentGrid Spacing="3">

    @if (!DocumentConfig.IsReadOnly)
    {
        <FluentGridItem xs="12" sm="6">
            <FluentDataGrid TGridItem=DocumentParagraph Items="@FilteredItems"
                            Style="height: 600px;" GridTemplateColumns="0.2fr 1fr 0.2fr 0.1fr"
                            ResizableColumns=true GenerateHeader="GenerateHeaderOption.Sticky"
                            Pagination="@_pagination">
                    <PropertyColumn Property="@(p => p.DocumentParagraphId)" Sortable="true" Align="Align.Center" Title="Document Paragraph Id" />
                    <PropertyColumn Property="@(p => p.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(_filter)" Tooltip="true" Title="Name">
                        <ColumnOptions>
                            <div class="search-box">
                                <FluentSearch type="filter" Autofocus=true @bind-Value=_filter @oninput="HandleFilter" @bind-Value:after="HandleClear" Placeholder="Paragraph name..." />
                            </div>
                        </ColumnOptions>
                    </PropertyColumn>
                    <PropertyColumn Property="@(p => p.DocumentParagraphType)" Sortable="true" Align="Align.Center" Title="Type" />
                    <TemplateColumn Align="@Align.Center">
                        <FluentButton aria-label="Open" IconEnd="@(new Icons.Regular.Size16.Add())" OnClick="@(() => Add(context))" Type="ButtonType.Button" />
                        <FluentButton aria-label="Edit" IconEnd="@(new Icons.Regular.Size16.MoreHorizontal())" OnClick="@(() => Edit(context))" Type="ButtonType.Button" />
                    </TemplateColumn>
            </FluentDataGrid>
            <FluentPaginator State="@_pagination" />
        </FluentGridItem>
    }

    <FluentGridItem xs="12" sm="6">
        <FluentLabel Typo="Typography.Subject">Selected Paragraphs</FluentLabel>
        <br/>
        @foreach (DocumentConfigParagraph configParagraph in DocumentConfig.ConfigParagraphs.OrderBy(c => c.Order))
        {
            <FluentAccordion>
                <FluentAccordionItem Expanded=true Style="margin: 10px">
                    <HeadingTemplate>
                        <FluentStack Orientation="Orientation.Horizontal">
                            <FluentNumberField @bind-Value="configParagraph.Order" Label="Order" ReadOnly="@(configParagraph.IsReadOnly)" Min="0" Style="width: 100px" />
                            <FluentLabel>@configParagraph.DocumentParagraph.Name</FluentLabel>
                            <FluentSpacer />

                            @if (!DocumentConfig.IsReadOnly)
                            {
                                <FluentButton aria-label="Remove" IconEnd="@(new Icons.Regular.Size16.Delete())" OnClick="@(() => Remove(configParagraph))" />
                            }

                        </FluentStack>
                    </HeadingTemplate>
                    <ChildContent>
                        <div style="margin-top: 10px;margin-bottom: 10px">
                            @configParagraph.DocumentParagraph.DisplayContent()
                        </div>
                    </ChildContent>
                </FluentAccordionItem>
            </FluentAccordion>
        }
    </FluentGridItem>
</FluentGrid>

@code {
    [Parameter, EditorRequired]
    public DocumentConfig DocumentConfig { get; set; } = new();

    [Parameter]
    public IEnumerable<DocumentParagraph>? Paragraphs { get; set; }

    public IQueryable<DocumentParagraph>? FilteredItems
    {
        get
        {
            if (string.IsNullOrWhiteSpace(_filter)) return Paragraphs?.AsQueryable();

            return Paragraphs?.AsQueryable().Where(p => !string.IsNullOrWhiteSpace(p.Name)
            && p.Name.Contains(_filter, StringComparison.CurrentCultureIgnoreCase));
        }
    }

    private string _filter = string.Empty;
    private PaginationState _pagination = new PaginationState { ItemsPerPage = 15 };

    private void Remove(DocumentConfigParagraph configParagraph)
    {
        DocumentConfig.ConfigParagraphs.Remove(configParagraph);
    }

    private void Add(DocumentParagraph paragraph)
    {
        DocumentConfigParagraph configParagraph = new() 
        {
            DocumentConfig = DocumentConfig,
            DocumentParagraph = paragraph
        };

        DocumentConfig.ConfigParagraphs.Add(configParagraph);
    }

    private void Edit(DocumentParagraph paragraph)
    {

    }

    private void HandleFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            _filter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(_filter))
        {
            _filter = string.Empty;
        }
    }
}
