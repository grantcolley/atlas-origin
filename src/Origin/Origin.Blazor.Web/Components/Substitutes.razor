<br />
<FluentAccordion>
    <FluentAccordionItem Expanded=true>
        <HeadingTemplate>
            <FluentStack Orientation="Orientation.Horizontal">
                Substitutes
            </FluentStack>
        </HeadingTemplate>
        <ChildContent>

            @if(!DocumentConfig.IsReadOnly)
            {
                <FluentButton Id="add-substitute" IconStart="@(new Icons.Regular.Size16.Bookmark())" OnClick="@AddSubstitute" Style="margin: 10px"/>
                <FluentTooltip Anchor="add-substitute" Position=TooltipPosition.Right>Add new substitute</FluentTooltip>
            }

            @foreach (Origin.Core.Models.DocumentSubstitute substitute in DocumentConfig.Substitutes.OrderBy(s => s.Key))
            {
                <FluentStack Orientation="Orientation.Horizontal" Style="margin: 10px;">
                    <FluentNumberField @bind-Value="substitute.DocumentSubstituteId" Label="Document Substitute Id" ReadOnly="true" Style="width: 100px" />
                    <FluentTextField Name="Code" @bind-Value="substitute.Key" Label="Key" ReadOnly="@(DocumentConfig.IsReadOnly)" Minlength="150"/>
                    <FluentTextField Name="Code" @bind-Value="substitute.Group" Label="Group" ReadOnly="@(DocumentConfig.IsReadOnly)" />

                    @if (!DocumentConfig.IsReadOnly)
                    {
                        <FluentButton aria-label="Delete" Type="ButtonType.Button" OnClick="@(() => RemoveSubstitute(substitute))">
                            <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                        </FluentButton>
                    }

                    <FluentSpacer />
                </FluentStack>
            }

        </ChildContent>
    </FluentAccordionItem>
</FluentAccordion>

@code {
    [Parameter, EditorRequired]
    public DocumentConfig DocumentConfig { get; set; } = new();

    protected void AddSubstitute()
    {
        DocumentConfig.Substitutes.Add(new DocumentSubstitute());
    }

    protected void RemoveSubstitute(Origin.Core.Models.DocumentSubstitute substitute)
    {
        DocumentConfig.Substitutes.Remove(substitute);
    }
}