@if (ReadOnly)
{
    <FluentTextField Value="@(_selectedOptionItem?.Display)" Label="@Label" ReadOnly="true">
        @if (ShowIcons && _selectedOptionItem != null && !string.IsNullOrWhiteSpace(_selectedOptionItem.Icon))
        {
            <FluentIcon Value="IconHelper.GetRegularSize20(_selectedOptionItem.Icon)" Slot="start" />
        }
    </FluentTextField>
}
else
{
    <FluentSelect TOption="OptionItem"
                  @onchange="OnChange"
                  Items="@Source"
                  Label="@Label"
                  OptionValue="@(oi => oi.Id)"
                  SelectedOption="@_selectedOptionItem"
                  Height="300px">
        <OptionTemplate>
            @if (ShowIcons && !string.IsNullOrWhiteSpace(context.Icon))
            {
                <FluentIcon Value="IconHelper.GetRegularSize20(context.Icon)" Slot="start" />
            }
            @context.Display
        </OptionTemplate>
    </FluentSelect>
}

@code {
    [CascadingParameter]
    private EditContext? CascadedEditContext { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? FieldName { get; set; }

    [Parameter]
    public bool ShowIcons { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public IEnumerable<OptionItem>? Source { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    private OptionItem? _selectedOptionItem;

    protected override void OnInitialized()
    {
        _selectedOptionItem = Source?.FirstOrDefault(o => o.Id == Value);
    }

    private async Task OnChange(ChangeEventArgs args)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(FieldName);

        string? value = args?.Value?.ToString();
        await ValueChanged.InvokeAsync(value);
        CascadedEditContext?.NotifyFieldChanged(CascadedEditContext.Field(FieldName));
    }
}