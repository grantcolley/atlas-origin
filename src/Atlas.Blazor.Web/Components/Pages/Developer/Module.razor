@page "/Module"
@page "/Module/{Id:int?}"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inherits ModelContainerBase<Atlas.Core.Models.Module>

@{
    // Display the markup for the underlying base
    // ModelContainerBase<T> we are inheriting.
    base.BuildRenderTree(__builder);
}

@code {
    [Inject]
    internal IOptionsRequests? OptionsRequests { get; set; }

    public override string? Title { get; set; } = "Module";
    public override string? APIGetEndpoint { get; set; } = AtlasAPIEndpoints.GET_MODULE;
    public override string? APICreateEndpoint { get; set; } = AtlasAPIEndpoints.CREATE_MODULE;
    public override string? APIUpdateEndpoint { get; set; } = AtlasAPIEndpoints.UPDATE_MODULE;
    public override string? APIDeleteEndpoint { get; set; } = AtlasAPIEndpoints.DELETE_MODULE;
    public override string? ModelNameField { get; set; } = "Name";
    public override string? IdentityFieldName { get; set; } = "ModuleId";

    private IEnumerable<OptionItem>? _permissions = [];

    protected override async Task OnInitializedAsync()
    {
        ArgumentNullException.ThrowIfNull(OptionsRequests);

        await base.OnInitializedAsync();

        try
        {
            _isProcessing = true;

            IResponse<IEnumerable<OptionItem>?> permissionsResponse = await OptionsRequests.GetOptionItemsAsync(Options.PERMISSIONS_OPTION_ITEMS).ConfigureAwait(false);

            _permissions = GetResponse(permissionsResponse);

            _isProcessing = false;
        }
        catch(Exception ex)
        {
            RouteAlert(Alerts.ERROR, $"{Title} Error", ex.Message, new AtlasException(ex.Message, ex));
        }
    }

    public override RenderFragment RenderModelContent() => __builder =>
    {
        if (Model == null) throw new NullReferenceException(nameof(Model));

        <FluentAccordion>
            <FluentAccordionItem Expanded=true>
                <HeadingTemplate>
                    @if (Model.ModuleId.Equals(0))
                    {
                        <FluentLabel Typo="Typography.Body">New Module</FluentLabel>
                    }
                    else
                    {
                        <FluentLabel Typo="Typography.Body">@($"Module Id {Model.ModuleId}")</FluentLabel>
                    }
                </HeadingTemplate>
                <ChildContent>
                    <div>
                        <FluentTextField Name="Name" @bind-Value=Model.Name Label="Name" ReadOnly="@(Model.IsReadOnly)" />
                        <FluentValidationMessage For="@(() => Model.Name)" />
                    </div>
                    <div>
                        <FluentNumberField Name="Order" @bind-Value=Model.Order Label="Order" ReadOnly="@(Model.IsReadOnly)" />
                        <FluentValidationMessage For="@(() => Model.Order)" />
                    </div>
                    <div>
                        <OptionsList Source="@_permissions" @bind-Value=Model.Permission FieldName="Permission" Label="Permission" ReadOnly="@(Model.IsReadOnly)" />
                        <FluentValidationMessage For="@(() => Model.Permission)" />
                    </div>
                    <div>
                        <IconSelectList @bind-Value=Model.Icon FieldName="Icon" Label="Icon" ReadOnly="@(Model.IsReadOnly)" />
                        <FluentValidationMessage For="@(() => Model.Icon)" />
                    </div>
                </ChildContent>
            </FluentAccordionItem>

            @if (Model.ModuleId > 0)
            {
                <FluentAccordionItem Expanded=true>
                    <HeadingTemplate>
                        Categories
                    </HeadingTemplate>
                    <ChildContent>
                        <GenericSortableGrid T="Atlas.Core.Models.Category"
                                             Source="@Model.Categories.OrderBy(c => c.Order)"
                                             Fields="@(new List<string>{ "Order", "Name" })"
                                             Header="Categories"
                                             FilterFieldName="Name"
                                             FilterPlaceholder="Category..." 
                                             EmptyText="This module has no categories."
                                             GridTemplateColumns="0.1fr 1fr" />
                    </ChildContent>
                </FluentAccordionItem>
            }

        </FluentAccordion>
    };
}