@page "/Database"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]

<PageTitle>Database Settings</PageTitle>

@if (_alert == null)
{
    <FluentCard>
        <FluentHeader>
            Database Settings
        </FluentHeader>

        <br />
        <br />

        @if (_databaseStatus != null)
        {
            @if (_databaseStatus.CanConnect)
            {
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentPresenceBadge OutOfOffice=true Status="PresenceStatus.Available" Size="PresenceBadgeSize.Large">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Database())" Width="64px" />
                    </FluentPresenceBadge>

                    <br />
                    <br />

                    <FluentButton IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
                                  Loading="@_isProcessing"
                                  OnClick="@SeedDatabaseAsync">
                        Seed data
                    </FluentButton>
                </FluentStack>
            }
            else
            {
                <FluentStack Orientation="Orientation.Vertical">
                    <FluentPresenceBadge OutOfOffice=true Status="PresenceStatus.Offline" Size="PresenceBadgeSize.Large">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Database())" Width="64px" />
                    </FluentPresenceBadge>

                    <br />
                    <br />

                    <FluentButton IconStart="@(new Icons.Regular.Size16.Database())"
                                  Loading="@_isProcessing"
                                  OnClick="@CreateDatabaseAsync">
                        Create database
                    </FluentButton>
                </FluentStack>
            }
        }
    </FluentCard>
}
else
{
    <Atlas.Blazor.Web.Components.Pages.Alert AlertType="@_alert.AlertType" Title="Logs" Message="@_alert.Message" />
}

@code {
    [CascadingParameter]
    internal Task<AuthenticationState>? AuthenticationState { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public ILogService? LoggingService { get; set; }

    [Inject]
    public IDeveloperRequests? DeveloperRequests { get; set; }

    private DatabaseStatus? _databaseStatus;
    private bool _isProcessing = false;
    private Alert? _alert = null;
    private string? _user = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (DeveloperRequests == null) throw new NullReferenceException(nameof(DeveloperRequests));

        try
        {
            _isProcessing = true;

            if (AuthenticationState != null)
            {
                AuthenticationState authenticationState = await AuthenticationState.ConfigureAwait(false);

                if (authenticationState != null
                    && authenticationState.User != null
                    && authenticationState.User.Identity != null
                    && authenticationState.User.Identity.IsAuthenticated)
                {
                    _user = authenticationState?.User?.Identity?.Name;
                }
            }

            IResponse<DatabaseStatus?> response = await DeveloperRequests.GetDatabaseStatusAsync().ConfigureAwait(false);

            if (!response.IsSuccess)
            {
                if (!string.IsNullOrWhiteSpace(response.Message))
                {
                    _alert = new Models.Alert
                        {
                            AlertType = Alerts.ERROR,
                            Title = $"Error NavMenu",
                            Message = response.Message
                        };
                }
            }
            else if (response.Result != null)
            {
                _databaseStatus = response.Result;
            }
        }
        catch (Exception ex)
        {
            LoggingService?.Log(Core.Logging.Enums.LogLevel.Error, ex.Message, new AtlasException(ex.Message, ex), _user);

            Models.Alert alert = new()
                {
                    AlertType = Alerts.ERROR,
                    Title = $"Error NavMenu",
                    Message = ex.Message
                };
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task CreateDatabaseAsync()
    {
        if (DeveloperRequests == null) throw new NullReferenceException(nameof(DeveloperRequests));

        try
        {
            _isProcessing = true;

            IResponse<DatabaseStatus?> response = await DeveloperRequests.CreateDatabaseAsync().ConfigureAwait(false);

            if (!response.IsSuccess)
            {
                if (!string.IsNullOrWhiteSpace(response.Message))
                {
                    _alert = new Models.Alert
                        {
                            AlertType = Alerts.ERROR,
                            Title = $"Error NavMenu",
                            Message = response.Message
                        };
                }
            }
            else if (response.Result != null)
            {
                _databaseStatus = response.Result;
            }
        }
        catch (Exception ex)
        {
            LoggingService?.Log(Core.Logging.Enums.LogLevel.Error, ex.Message, new AtlasException(ex.Message, ex), _user);

            Models.Alert alert = new()
                {
                    AlertType = Alerts.ERROR,
                    Title = $"Error NavMenu",
                    Message = ex.Message
                };
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task SeedDatabaseAsync()
    {
        if (DeveloperRequests == null) throw new NullReferenceException(nameof(DeveloperRequests));

        try
        {
            _isProcessing = true;

            IResponse<DatabaseStatus?> response = await DeveloperRequests.SeedDatabaseAsync().ConfigureAwait(false);

            if (!response.IsSuccess)
            {
                if (!string.IsNullOrWhiteSpace(response.Message))
                {
                    _alert = new Models.Alert
                        {
                            AlertType = Alerts.ERROR,
                            Title = $"Error NavMenu",
                            Message = response.Message
                        };
                }
            }
            else if (response.Result != null)
            {
                NavigationManager?.NavigateTo(NavigationManager.Uri, true);
            }
        }
        catch (Exception ex)
        {
            LoggingService?.Log(Core.Logging.Enums.LogLevel.Error, ex.Message, new AtlasException(ex.Message, ex), _user);

            Models.Alert alert = new()
                {
                    AlertType = Alerts.ERROR,
                    Title = $"Error NavMenu",
                    Message = ex.Message
                };
        }
        finally
        {
            _isProcessing = false;
        }
    }
}
