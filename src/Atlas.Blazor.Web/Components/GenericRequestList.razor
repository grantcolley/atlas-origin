@inherits AtlasComponentBase
@typeparam T where T : ModelBase, new()

@if (ReadOnly)
{
    @if (_selectedItem != null && DisplayFieldName != null)
    {
        <FluentTextField Value="@(@_dynamicType?.GetValue(_selectedItem, DisplayFieldName)?.ToString())" Label="@Label" ReadOnly="true">
            @if (ShowIcons && !string.IsNullOrWhiteSpace(_dynamicType?.GetValue(_selectedItem, IconFieldName ?? throw new NullReferenceException(nameof(IdentifierFieldName)))?.ToString()))
            {
                <FluentIcon Value="IconHelper.GetRegularSize20(_dynamicType?.GetValue(_selectedItem, IconFieldName ?? throw new NullReferenceException(nameof(IdentifierFieldName)))?.ToString())" Slot="start" />
            }
        </FluentTextField>
    }
}
else
{
    <FluentSelect Items="@_source"
                  Label="@Label"
                  Height="300px"
                  OptionValue="@(i => _dynamicType?.GetValue(i ?? throw new NullReferenceException(nameof(i)), IdentifierFieldName ?? throw new NullReferenceException(nameof(IdentifierFieldName)))?.ToString())"
                  @bind-SelectedOption="@_selectedItem"
                  @onchange="OnChange">
        <OptionTemplate>
            @if (context != null && DisplayFieldName != null)
            {
                @if (ShowIcons && !string.IsNullOrWhiteSpace(_dynamicType?.GetValue(context, IconFieldName ?? throw new NullReferenceException(nameof(IdentifierFieldName)))?.ToString()))
                {
                    <FluentIcon Value="IconHelper.GetRegularSize20(_dynamicType?.GetValue(context, IconFieldName ?? throw new NullReferenceException(nameof(IdentifierFieldName)))?.ToString())" Slot="start" />
                }

                @_dynamicType?.GetValue(context, DisplayFieldName)?.ToString()
            }
        </OptionTemplate>
    </FluentSelect>
}

@code {

    [CascadingParameter]
    private EditContext? CascadedEditContext { get; set; }

    [Inject]
    internal IOptionsRequests? OptionsRequests { get; set; }

    [Parameter]
    public string? OptionsCode { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? FieldName { get; set; }

    [Parameter]
    public string? IdentifierFieldName { get; set; }

    [Parameter]
    public string? DisplayFieldName { get; set; }

    [Parameter]
    public string? IconFieldName { get; set; }

    [Parameter]
    public bool ShowIcons { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    private T? _selectedItem;
    private IEnumerable<T>? _source = [];
    private DynamicType<T> _dynamicType = DynamicTypeHelper.Get<T>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ArgumentNullException.ThrowIfNull(OptionsRequests);
            ArgumentNullException.ThrowIfNull(NavigationManager);
            ArgumentNullException.ThrowIfNullOrWhiteSpace(OptionsCode);
            ArgumentNullException.ThrowIfNullOrWhiteSpace(IdentifierFieldName);

            await base.OnInitializedAsync();

            IResponse<IEnumerable<T>?> response = await OptionsRequests.GetGenericOptionsAsync<T>(OptionsCode).ConfigureAwait(false);

            _source = GetResponse(response);

            if (Value != null)
            {
                int id = (int)(_dynamicType?.GetValue(Value, IdentifierFieldName) ?? 0);

                _selectedItem = _source?.FirstOrDefault(o => (int)(_dynamicType?.GetValue(o, IdentifierFieldName) ?? 0) == id);
            }
        }
        catch (Exception ex)
        {
            RouteAlert(ex.Message, new AtlasException(ex.Message, ex));
        }
    }

    private async Task OnChange(ChangeEventArgs args)
    {
        ArgumentNullException.ThrowIfNullOrWhiteSpace(FieldName);
        ArgumentNullException.ThrowIfNullOrWhiteSpace(IdentifierFieldName);

        string? value = args?.Value?.ToString();

        if (!string.IsNullOrWhiteSpace(value) && value != "-1")
        {
            _selectedItem = _source?.FirstOrDefault(o => _dynamicType?.GetValue(o, IdentifierFieldName)?.ToString() == value);
        }
        else
        {
            _selectedItem = null;
        }

        await ValueChanged.InvokeAsync(_selectedItem);
        CascadedEditContext?.NotifyFieldChanged(CascadedEditContext.Field(FieldName));
    }
}
