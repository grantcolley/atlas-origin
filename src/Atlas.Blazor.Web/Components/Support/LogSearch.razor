@implements IDisposable

<FluentStack Orientation="Orientation.Horizontal" Wrap="true">
    <div>
        <FluentLabel>From</FluentLabel>
        <div style=" display: flex; flex-direction:row;">
            <FluentDatePicker @bind-Value=@(_logArgs.From) Style="margin-right: 2px; width: 120px" />
            <FluentTimePicker @bind-Value=@(_logArgs.From) />
        </div>
    </div>

    <div>
        <FluentLabel>To</FluentLabel>
        <div style=" display: flex; flex-direction:row;">
            <FluentDatePicker @bind-Value=@(_logArgs.To) Style="margin-right: 2px; width: 120px" />
            <FluentTimePicker @bind-Value=@(_logArgs.To) />
        </div>
    </div>

    <div>
        <FluentLabel>Level</FluentLabel>
        <FluentSelect TOption="string" @bind-Value=@(_logArgs.Level) Width="130px">
            <FluentOption Value="Information">
                Information
                <FluentIcon Value="@IconHelper.GetRegularSize16("Info")" Color="@IconHelper.GetIconColor("Information")" Slot="start" />
            </FluentOption>
            <FluentOption Value="Warning">
                Warning
                <FluentIcon Value="@IconHelper.GetRegularSize16("Warning")" Color="@IconHelper.GetIconColor("Warning")" Slot="start" />
            </FluentOption>
            <FluentOption Value="Error">
                Error
                <FluentIcon Value="@IconHelper.GetRegularSize16("DismissCircle")" Color="@IconHelper.GetIconColor("Error")" Slot="start" />
            </FluentOption>
        </FluentSelect>
    </div>

    <div>
        <FluentLabel>Message</FluentLabel>
        <FluentTextField @bind-Value=@(_logArgs.Message) Immediate="true" />
    </div>

    <div>
        <FluentLabel>Context</FluentLabel>
        <FluentTextField @bind-Value=@(_logArgs.Context) Immediate="true" />
    </div>

    <div>
        <FluentLabel>User</FluentLabel>
        <div style=" display: flex; flex-direction:row;">
            <FluentTextField @bind-Value=@(_logArgs.User) Style="margin-right: 10px;" Immediate="true" />
            <FluentButton aria-label="Search" IconEnd="@(new Icons.Regular.Size20.Search())" OnClick="@(() => SearchClick())" />
        </div>
    </div>

    <FluentSpacer />

</FluentStack>

@code {
    [Inject]
    private IKeyCodeService? KeyCodeService { get; set; }

    [Inject]
    public IAtlasDialogService? AtlasDialogService { get; set; }

    [Parameter]
    public EventCallback<LogArgs?> SearchClicked { get; set; }

    private LogArgs _logArgs = new();

    protected override void OnInitialized()
    {
        FluentKeyCode.PreventMultipleKeyDown = true;
        KeyCodeService?.RegisterListener(OnKeyHandleAsync);
    }

    private async Task OnKeyHandleAsync(FluentKeyCodeEventArgs args)
    {
        if (args.Key.Equals(KeyCode.Enter))
        {
            await Search().ConfigureAwait(false);
        }
    }

    private async void SearchClick()
    {
        await Search().ConfigureAwait(false);
    }

    private async Task Search()
    {
        ArgumentNullException.ThrowIfNull(AtlasDialogService);
        ArgumentNullException.ThrowIfNull(_logArgs);

        if(_logArgs.From == null
            || _logArgs.To == null)
        {
            await AtlasDialogService.ShowDialogAsync(
                $"Log Search", $"A From and To date range is mandatory when searching the logs.", AtlasDialogType.Ok)
                .ConfigureAwait(false);
            return;
        }

        await SearchClicked.InvokeAsync(_logArgs);
    }

    void IDisposable.Dispose()
    {
        KeyCodeService?.UnregisterListener(OnKeyHandleAsync);
    }
}
